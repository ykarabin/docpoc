{"version":3,"sources":["DocViewer.js","App.js","reportWebVitals.js","index.js"],"names":["DocViewer","url","className","viewer","useRef","useEffect","WebViewer","path","current","then","instance","loadDocument","disableElements","ref","App","useState","format","setFormat","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAGaA,EAAY,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,UACtBC,EAASC,iBAAO,MAgBtB,OAdAC,qBAAU,WACNC,IACI,CACIC,KAAM,yBAEVJ,EAAOK,SACTC,MAAK,SAAAC,GACHA,EAASC,aAAaV,GACtBS,EAASE,gBAAgB,CAAE,gBAIhC,CAACX,IAGA,qBAAeY,IAAKV,EAAQD,UAAWA,GAA7BD,ICAHa,MAjBf,WAAgB,IAAD,EACiBC,mBAAS,QAD1B,mBACJC,EADI,KACIC,EADJ,KAGX,OACI,sBAAKf,UAAU,MAAf,UACI,sBAAKA,UAAU,UAAf,UACI,wBAAQgB,QAAS,WAAKD,EAAU,SAAhC,kBACA,wBAAQC,QAAS,WAAKD,EAAU,SAAhC,kBACA,wBAAQC,QAAS,WAAKD,EAAU,SAAhC,kBACA,wBAAQC,QAAS,WAAKD,EAAU,QAAhC,oBAEJ,qBAAKf,UAAU,SAAf,SAAyBc,IACzB,cAAC,EAAD,CAAWd,UAAU,MAAMD,IAAG,sBAAiBe,SCJ5CG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6c3f7660.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\r\nimport WebViewer from '@pdftron/webviewer'\r\n\r\nexport const DocViewer = ({url, className}) => {\r\n    const viewer = useRef(null);\r\n\r\n    useEffect(() => {\r\n        WebViewer(\r\n            {\r\n                path: '/docpoc/webviewer/lib',\r\n            },\r\n            viewer.current,\r\n        ).then(instance => {\r\n            instance.loadDocument(url);\r\n            instance.disableElements([ 'header' ]);\r\n\r\n\r\n        });\r\n    }, [url]);\r\n\r\n    return (\r\n        <div key={url} ref={viewer} className={className}/>\r\n    );\r\n};","import React, {useState} from 'react';\nimport './App.css';\nimport {DocViewer} from './DocViewer';\n\nfunction App() {\n    const [format, setFormat] = useState('docx');\n\n    return (\n        <div className=\"App\">\n            <div className=\"buttons\">\n                <button onClick={()=>{setFormat('docx')}}>docx</button>\n                <button onClick={()=>{setFormat('xlsx')}}>xlsx</button>\n                <button onClick={()=>{setFormat('pptx')}}>pptx</button>\n                <button onClick={()=>{setFormat('pdf')}}>pdf</button>\n            </div>\n            <div className=\"format\">{format}</div>\n            <DocViewer className=\"doc\" url={`/docpoc/doc.${format}`} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}